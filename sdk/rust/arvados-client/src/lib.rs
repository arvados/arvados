
use serde_json::Value;
use std::collections::HashMap;
use serde::{Serialize, Deserialize};
use std::rc::Rc;
use std::fmt::{Write};
use reqwest::{Client};
use reqwest::header::{HeaderValue, HeaderMap, AUTHORIZATION};


// This code is generated by the build.rs script and avados-api-generator.
include!(concat!(env!("OUT_DIR"), "/arvados-api.rs"));

#[derive(Debug)]
pub struct ArvadosApi {
    // Ref counted pointer to client data. Ideally should be a reference.
    client: Rc<ArvadosClient>,
}

#[derive(Debug)]
pub struct ArvadosClient {
    /// Reqwest client. Could be hyper?
    http_client: Client,

    /// base of the http request string.
    base_url: String,
}

impl ArvadosApi {
    pub fn new(arv_api_host: &str, arv_api_token: &str, arv_api_host_insecure: bool) -> Result<Self> {
        Ok(ArvadosApi { client: Rc::new(ArvadosClient::new(arv_api_host, arv_api_token, arv_api_host_insecure)?)})
    }
}

type ArvadosError = Box<dyn std::error::Error + Send + Sync>;
pub type Result<T> = std::result::Result<T, ArvadosError>;


impl ArvadosClient {
    pub fn new(arv_api_host: &str, arv_api_token: &str, arv_api_host_insecure: bool) -> Result<Self> {
        let proto = if arv_api_host_insecure { "http" } else {"https" };
        let base_url = format!("{}://{}/arvados/v1/", proto, arv_api_host);
        let mut headers = HeaderMap::new();
        let auth = format!("OAuth2 {}", arv_api_token);
        headers.insert(AUTHORIZATION, HeaderValue::from_str(auth.as_ref())?);
        let http_client = Client::builder().default_headers(headers).build()?;
        Ok(Self { http_client, base_url })
    }

    pub fn http_client(&self) -> &Client {
        &self.http_client
    }
}

fn opt<T : Serialize>(query_string : &mut String, name: &str, val: &Option<T>) {
    if val.is_some() {
        req(query_string, name, val.as_ref().unwrap());
    }
}

fn req<T : Serialize>(query_string : &mut String, name: &str, val: &T) {
    let json = serde_json::to_string(val).unwrap();
    let delim = if query_string.is_empty() { '?' } else { '&' };
    write!(query_string, "{}{}={}", delim, name, json).unwrap();
}


#[cfg(test)]
mod tests {
    use super::*;

    use std::convert::Infallible;
    use std::net::SocketAddr;
    use hyper::service::{make_service_fn, service_fn};
    
    async fn mock_handler(req: hyper::Request<hyper::Body>) -> std::result::Result<hyper::Response<hyper::Body>, Infallible> {
        eprintln!("in handler {} {:?} {:?}", req.method(), req.uri().path(), req.uri().query());
        match (req.method(), req.uri().path()) {
            _ => Ok(hyper::Response::builder().status(hyper::StatusCode::OK).body(hyper::Body::from("{}")).unwrap())
        }
    }
    
    #[tokio::test]
    async fn test_keep_services_get() {
        // Use an ephemeral port for a test server
        let addr = SocketAddr::from(([0, 0, 0, 0], 0));
    
        let make_service = make_service_fn(|_conn| async {
            Ok::<_, Infallible>(service_fn(mock_handler))
        });
    
        // server will make a service on every new connection
        let server = hyper::Server::bind(&addr).serve(make_service);
        let arv_api_host = server.local_addr().to_string();
        let arv_api_token = "token";
        let arv_api_host_insecure = true;

        // run the server until the queries have finished.
        let e = server.with_graceful_shutdown(
            async {
                let arvados = ArvadosApi::new(arv_api_host.as_ref(), arv_api_token, arv_api_host_insecure).unwrap();
                let _resp : KeepService = arvados.keep_services().get("xyz".to_string()).fetch().await.unwrap();
                let _resp : KeepService = arvados.keep_services().delete("xyz".to_string()).fetch().await.unwrap();

                let _resp = arvados.keep_services().list().filters(Some(vec!["1".into(), "2".into()])).fetch().await.unwrap();

                assert!(false);
            }
        ).await;
        assert!(e.is_ok());
    }
}
