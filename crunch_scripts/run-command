#!/usr/bin/env python

import arvados
import re
import os
import subprocess
import sys
import shutil
import subst
import time
import arvados.commands.put as put
import signal

os.umask(0077)

t = arvados.current_task().tmpdir

api = arvados.api('v1')

os.chdir(arvados.current_task().tmpdir)
os.mkdir("tmpdir")
os.mkdir("output")

os.chdir("output")

if len(arvados.current_task()['parameters']) > 0:
    p = arvados.current_task()['parameters']
else:
    p = arvados.current_job()['script_parameters']

links = []

def sub_link(v):
    r = os.path.basename(v)
    os.symlink(os.path.join(os.environ['TASK_KEEPMOUNT'], v) , r)
    links.append(r)
    return r

def sub_tmpdir(v):
    return os.path.join(arvados.current_task().tmpdir, 'tmpdir')

def sub_cores(v):
     return os.environ['CRUNCH_NODE_SLOTS']

subst.default_subs["link "] = sub_link
subst.default_subs["tmpdir"] = sub_tmpdir
subst.default_subs["node.cores"] = sub_cores

rcode = 1

def machine_progress(bytes_written, bytes_expected):
    return "run-command: wrote {} total {}\n".format(
        bytes_written, -1 if (bytes_expected is None) else bytes_expected)

class SigHandler(object):
    def __init__(self):
        self.sig = None

    def send_signal(self, sp, signum):
        sp.send_signal(signum)
        self.sig = signum

try:
    cmd = []
    for c in p["command"]:
        cmd.append(subst.do_substitution(p, c))

    stdoutname = None
    stdoutfile = None
    if "stdout" in p:
        stdoutname = subst.do_substitution(p, p["stdout"])
        stdoutfile = open(stdoutname, "wb")

    print("run-command: {}{}".format(' '.join(cmd), (" > " + stdoutname) if stdoutname != None else ""))

    sp = subprocess.Popen(cmd, shell=False, stdout=stdoutfile)
    sig = SigHandler()

    # forward signals to the process.
    signal.signal(signal.SIGINT, lambda signum, frame: sig.send_signal(sp, signum))
    signal.signal(signal.SIGTERM, lambda signum, frame: sig.send_signal(sp, signum))
    signal.signal(signal.SIGQUIT, lambda signum, frame: sig.send_signal(sp, signum))

    # wait for process to complete.
    rcode = sp.wait()

    if sig.sig != None:
        print("run-command: terminating on signal %s" % sig.sig)
        sys.exit(2)
    else:
        print("run-command: completed with exit code %i (%s)" % (rcode, "success" if rcode == 0 else "failed"))

except Exception as e:
    print("run-command: caught exception: {}".format(e))

# restore default signal handlers.
signal.signal(signal.SIGINT, signal.SIG_DFL)
signal.signal(signal.SIGTERM, signal.SIG_DFL)
signal.signal(signal.SIGQUIT, signal.SIG_DFL)

for l in links:
    os.unlink(l)

print("run-command: the follow output files will be saved to keep:")

subprocess.call(["find", ".", "-type", "f", "-printf", "run-command: %12.12s %h/%f\\n"])

print("run-command: start writing output to keep")

done = False
resume_cache = put.ResumeCache(os.path.join(arvados.current_task().tmpdir, "upload-output-checkpoint"))
reporter = put.progress_writer(machine_progress)
bytes_expected = put.expected_bytes_for(".")
while not done:
    try:
        out = put.ArvPutCollectionWriter.from_cache(resume_cache, reporter, bytes_expected)
        out.do_queued_work()
        out.write_directory_tree(".", max_manifest_depth=0)
        outuuid = out.finish()
        api.job_tasks().update(uuid=arvados.current_task()['uuid'],
                                             body={
                                                 'output':outuuid,
                                                 'success': (rcode == 0),
                                                 'progress':1.0
                                             }).execute()
        done = True
    except KeyboardInterrupt:
        print("run-command: terminating on signal 2")
        sys.exit(2)
    except Exception as e:
        print("run-command: caught exception: {}".format(e))
        time.sleep(5)

sys.exit(rcode)
