---
layout: default
navsection: sdk
navmenu: Python
title: "Installation"
...
{% comment %}
Copyright (C) The Arvados Authors. All rights reserved.

SPDX-License-Identifier: CC-BY-SA-3.0
{% endcomment %}

The Python SDK provides access from Python to the Arvados API and Keep, along with a number of command line tools for using and administering Arvados and Keep.

h2. Installation

If you are logged in to an Arvados VM, the Python SDK should be installed.

To use the Python SDK elsewhere, you can install from PyPI or a distribution package.

As of Arvados 2.2, the Python SDK requires Python 3.6+.  The last version to support Python 2.7 is Arvados 2.0.4.

h2. Option 1: Install from a distribution package

This installation method is recommended to make the CLI tools available system-wide. It can coexist with the installation method described in option 2, below.

First, configure the "Arvados package repositories":../../install/packages.html

{% assign arvados_component = 'python3-arvados-python-client' %}

{% include 'install_packages' %}

h2. Option 2: Install with pip

This installation method is recommended to use the SDK in your own Python programs. If installed into a @virtualenv@, it can coexist with the system-wide installation method from a distribution package.

Run @pip install arvados-python-client@ in an appropriate installation environment, such as a @virtualenv@.

Note:

The SDK uses @pycurl@ which depends on the @libcurl@ C library.  To build the module you may have to first install additional packages.  On Debian 10 this is:

<pre>
$ apt-get install git build-essential python3-dev libcurl4-openssl-dev libssl-dev
</pre>

If your version of @pip@ is 1.4 or newer, the @pip install@ command might give an error: "Could not find a version that satisfies the requirement arvados-python-client". If this happens, try @pip install --pre arvados-python-client@.

h2. Test installation

If the SDK is installed and your @ARVADOS_API_HOST@ and @ARVADOS_API_TOKEN@ environment variables are set up correctly (see "api-tokens":{{site.baseurl}}/user/reference/api-tokens.html for details), @import arvados@ should produce no errors.

If you installed with pip (option 1, above):

<notextile>
<pre>~$ <code class="userinput">python</code>
Python 3.7.3 (default, Jul 25 2020, 13:03:44)
[GCC 8.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> <code class="userinput">import arvados</code>
>>> <code class="userinput">arvados.api('v1')</code>
&lt;apiclient.discovery.Resource object at 0x233bb50&gt;
</pre>
</notextile>

If you installed from a distribution package (option 2): the package includes a virtualenv, which means the correct Python environment needs to be loaded before the Arvados SDK can be imported. This can be done by activating the virtualenv first:

<notextile>
<pre>~$ <code class="userinput">source /usr/share/python3/dist/python3-arvados-python-client/bin/activate</code>
(python-arvados-python-client) ~$ <code class="userinput">python</code>
Python 3.7.3 (default, Jul 25 2020, 13:03:44)
[GCC 8.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> <code class="userinput">import arvados</code>
>>> <code class="userinput">arvados.api('v1')</code>
&lt;apiclient.discovery.Resource object at 0x233bb50&gt;
</pre>
</notextile>

Or alternatively, by using the Python executable from the virtualenv directly:

<notextile>
<pre>~$ <code class="userinput">/usr/share/python3/dist/python3-arvados-python-client/bin/python</code>
Python 3.7.3 (default, Jul 25 2020, 13:03:44)
[GCC 8.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> <code class="userinput">import arvados</code>
>>> <code class="userinput">arvados.api('v1')</code>
&lt;apiclient.discovery.Resource object at 0x233bb50&gt;
</pre>
</notextile>

h2. Usage

Check out the "examples":example.html and "cookbook":cookbook.html

h3. Notes

The general form of an API call is:

<notextile>
<pre><code class="userinput">arvados.api(<i>api_version</i>).<i>plural_resource_type</i>().<i>api_method</i>(<i>parameter</i>=<i>value</i>, ...).execute()
</code></pre>
</notextile>

Many API methods accept a parameter whose name is the same as the resource type. For example, @links.create@ accepts a parameter called @link@. This parameter should be given as @body@.

<notextile>
<pre><code class="userinput">arvados.api('v1').links().create(
    uuid=test_link['uuid'],
    body={'properties':{'foo':'bar'}}).execute()
</code></pre>
</notextile>

One way to make API calls slightly less verbose is:

<notextile>
<pre><code class="userinput">arv = arvados.api('v1')
j = arv.jobs().list().execute()
</code></pre>
</notextile>

The SDK retrieves the list of API methods from the server at run time. Therefore, the set of available methods is determined by the server version rather than the SDK version.
