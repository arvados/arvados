---
layout: default
navsection: installguide
title: Install API server and Controller
...
{% comment %}
Copyright (C) The Arvados Authors. All rights reserved.

SPDX-License-Identifier: CC-BY-SA-3.0
{% endcomment %}

# "Introduction":#introduction
# "Install dependencies":#dependencies
# "Set up database":#database-setup
# "Update config.yml":#update-config
# "Update nginx configuration":#update-nginx
# "Install arvados-api-server and arvados-controller":#install-packages
# "Confirm working installation":#confirm-working

h2(#introduction). Introduction

The Arvados core API server consists of four services: PostgreSQL, Arvados Rails API, Arvados Controller, and Nginx.

Here is a simplified diagram showing the relationship between the core services.  Client requests arrive at the public-facing Nginx reverse proxy.  The request is forwarded to Arvados controller.  The controller is able handle some requests itself, the rest are forwarded to the Arvados Rails API.  The Rails API server implements the majority of business logic, communicating with the PostgreSQL database to fetch data and make transactional updates.  All services are stateless, except the PostgreSQL database.  This guide assumes all of these services will be installed on the same node, but it is possible to install these services across multiple nodes.

!(full-width){{site.baseurl}}/images/proxy-chain.svg!

h2(#dependencies). Install dependencies

# "Install PostgreSQL":install-postgresql.html
# "Install nginx":nginx.html

h2(#database-setup). Set up database

{% assign service_role = "arvados" %}
{% assign service_database = "arvados_production" %}
{% assign use_contrib = true %}
{% include 'install_postgres_database' %}

h2(#update-config). Update config.yml

Starting from an "empty config.yml file,":config.html#empty add the following configuration keys.

h3. Tokens

<notextile>
<pre><code>    SystemRootToken: <span class="userinput">"$system_root_token"</span>
    ManagementToken: <span class="userinput">"$management_token"</span>
    Collections:
      BlobSigningKey: <span class="userinput">"$blob_signing_key"</span>
</code></pre>
</notextile>

These secret tokens are used to authenticate messages between Arvados components.
* @SystemRootToken@ is used by Arvados system services to authenticate as the system (root) user when communicating with the API server.
* @ManagementToken@ is used to authenticate access to system metrics.
* @Collections.BlobSigningKey@ is used to control access to Keep blocks.

Each token should be a string of at least 50 alphanumeric characters. You can generate a suitable token with the following command:

<notextile>
<pre><code>~$ <span class="userinput">tr -dc 0-9a-zA-Z &lt;/dev/urandom | head -c50 ; echo</span>
</code></pre>
</notextile>

h3. PostgreSQL.Connection

<notextile>
<pre><code>    PostgreSQL:
      Connection:
        host: <span class="userinput">localhost</span>
        user: <span class="userinput">arvados</span>
        password: <span class="userinput">$postgres_password</span>
        dbname: <span class="userinput">arvados_production</span>
</code></pre>
</notextile>

Replace the @$postgres_password@ placeholder with the password you generated during "database setup":#database-setup.

h3. Services

<notextile>
<pre><code>    Services:
      Controller:
        ExternalURL: <span class="userinput">"https://ClusterID.example.com"</span>
        InternalURLs:
          <span class="userinput">"http://localhost:8003": {}</span>
      RailsAPI:
        # Does not have an ExternalURL
        InternalURLs:
          <span class="userinput">"http://localhost:8004": {}</span>
</code></pre>
</notextile>

Replace @ClusterID.example.com@ with the hostname that you previously selected for the API server.

The @Services@ section of the configuration helps Arvados components contact one another (service discovery).  Each service has one or more @InternalURLs@ and an @ExternalURL@.  The @InternalURLs@ describe where the service runs, and how the Nginx reverse proxy will connect to it.  The @ExternalURL@ is how external clients contact the service.

h2(#update-nginx). Update nginx configuration

Use a text editor to create a new file @/etc/nginx/conf.d/arvados-controller.conf@ with the following configuration.  Options that need attention are marked in <span class="userinput">red</span>.

<notextile>
<pre><code>proxy_http_version 1.1;

# When Keep clients request a list of Keep services from the API
# server, use the origin IP address to determine if the request came
# from the internal subnet or it is an external client.  This sets the
# $external_client variable which in turn is used to set the
# X-External-Client header.
#
# The API server uses this header to choose whether to respond to a
# "available keep services" request with either a list of internal keep
# servers (0) or with the keepproxy (1).
#
# <span class="userinput">Following the example here, update the 10.20.30.0/24 netmask</span>
# <span class="userinput">to match your private subnet.</span>
# <span class="userinput">Update 1.2.3.4 and add lines as necessary with the public IP</span>
# <span class="userinput">address of all servers that can also access the private network to</span>
# <span class="userinput">ensure they are not considered 'external'.</span>

geo $external_client {
  default        1;
  127.0.0.0/24   0;
  <span class="userinput">10.20.30.0/24</span>  0;
  <span class="userinput">1.2.3.4/32</span>     0;
}

# This is the port where nginx expects to contact arvados-controller.
upstream controller {
  server     localhost:8003  fail_timeout=10s;
}

server {
  # This configures the public https port that clients will actually connect to,
  # the request is reverse proxied to the upstream 'controller'

  listen       443 ssl;
  server_name  <span class="userinput">ClusterID.example.com</span>;

  ssl_certificate     <span class="userinput">/YOUR/PATH/TO/cert.pem</span>;
  ssl_certificate_key <span class="userinput">/YOUR/PATH/TO/cert.key</span>;

  # Refer to the comment about this setting in the passenger (arvados
  # api server) section of your Nginx configuration.
  client_max_body_size 128m;

  location / {
    proxy_pass               http://controller;
    proxy_redirect           off;
    proxy_connect_timeout    90s;
    proxy_read_timeout       300s;
    proxy_max_temp_file_size 0;
    proxy_request_buffering  off;
    proxy_buffering          off;
    proxy_http_version       1.1;

    proxy_set_header      Host              $http_host;
    proxy_set_header      Upgrade           $http_upgrade;
    proxy_set_header      Connection        "upgrade";
    proxy_set_header      X-External-Client $external_client;
    proxy_set_header      X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header      X-Forwarded-Proto https;
    proxy_set_header      X-Real-IP         $remote_addr;
  }
}
</code></pre>
</notextile>

h2. Enable development repository

Skip to the next section if you are installing on Debian or Ubuntu.

On Red Hat, AlmaLinux, and Rocky Linux, the API server package depends on development headers available from a separate repository. The repository you need depends on which version of the distribution you're running. Run the command given for your distribution below:

|_. Distribution and version|_. Command to enable repository|
|Red Hat/AlmaLinux/Rocky Linux 9|@# dnf config-manager --set-enabled devel@|
|Red Hat/AlmaLinux/Rocky Linux 8|@# dnf config-manager --set-enabled powertools@|

{% assign arvados_component = 'arvados-api-server arvados-controller' %}

{% include 'install_packages' %}

h3(#railsapi-config). Configure Rails API server

By default, the Rails API server is configured to listen on @localhost:8004@, matching the example cluster configuration above. If you need to change this, edit the @arvados-railsapi.service@ definition to redefine the @PASSENGER_ADDRESS@ and @PASSENGER_PORT@ environment variables, like this:

<notextile>
<pre><code># <span class="userinput">systemctl edit arvados-railsapi.service</span>
### Editing /etc/systemd/system/arvados-railsapi.service.d/override.conf
### Anything between here and the comment below will become the new contents of the file
<span class="userinput">[Service]
Environment=PASSENGER_ADDRESS=<strong>0.0.0.0</strong>
Environment=PASSENGER_PORT=<strong>8040</strong></span>
### Lines below this comment will be discarded
[...]
</code></pre>
</notextile>

You can similarly define other Passenger settings if desired. The "Passenger Standalone reference":https://www.phusionpassenger.com/library/config/standalone/reference/ documents all the available settings.

{% assign arvados_component = 'arvados-railsapi arvados-controller' %}

{% include 'start_service' %}

h2(#confirm-working). Confirm working installation

We recommend using the "Cluster diagnostics tool.":diagnostics.html  The first few tests (10, 20, 30) will succeed if you have a working API server and controller.  Of course, tests for services that you have not yet installed and configured will fail.

Here are some other checks you can perform manually.

h3. Confirm working controller

<notextile><pre><code>$ curl https://<span class="userinput">ClusterID.example.com</span>/arvados/v1/config
</code></pre></notextile>

h3. Confirm working Rails API server

<notextile><pre><code>$ curl https://<span class="userinput">ClusterID.example.com</span>/discovery/v1/apis/arvados/v1/rest
</code></pre></notextile>

h3. Confirm that you can use the system root token to act as the system root user

<notextile><pre><code>$ curl -H "Authorization: Bearer $system_root_token" https://<span class="userinput">ClusterID.example.com</span>/arvados/v1/users/current
</code></pre></notextile>

h3. Troubleshooting

If you are getting TLS errors, make sure the @ssl_certificate@ directive in your nginx configuration has the "full certificate chain":http://nginx.org/en/docs/http/configuring_https_servers.html#chains.

Logs can be found in @/var/www/arvados-api/current/log/production.log@ and using @journalctl -u arvados-controller@. See also the admin page on "Logging":{{site.baseurl}}/admin/logging.html.
