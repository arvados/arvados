---
layout: default
navsection: installguide
title: Install the Slurm dispatcher

...
{% comment %}
Copyright (C) The Arvados Authors. All rights reserved.

SPDX-License-Identifier: CC-BY-SA-3.0
{% endcomment %}

{% include 'notebox_begin_warning' %}
@crunch-dispatch-slurm@ is only relevant for on premises clusters that will spool jobs to Slurm. Skip this section if you use LSF or if you are installing a cloud cluster.
{% include 'notebox_end' %}

# "Introduction":#introduction
# "Update config.yml":#update-config
# "Install crunch-dispatch-slurm":#install-packages
# "Start the service":#start-service
# "Restart the API server and controller":#restart-api

h2(#introduction). Introduction

This assumes you already have a Slurm cluster, and have set up all of your compute nodes with "Docker":../crunch2/install-compute-node-docker.html or "Singularity":../crunch2/install-compute-node-singularity.html.  Slurm packages are available on all distributions supported by Arvados. Please see your distribution package repositories. For information on installing Slurm from source, see "this install guide":https://slurm.schedmd.com/quickstart_admin.html

The Arvados Slurm dispatcher can run on any node that can submit requests to both the Arvados API server and the Slurm controller (via @sbatch@).  It is not resource-intensive, so you can run it on the API server node.

h2(#update-config). Update config.yml

Crunch-dispatch-slurm reads the common configuration file at @/etc/arvados/config.yml@.

Add a DispatchSLURM entry to the Services section, using the hostname where @crunch-dispatch-slurm@ will run, and an available port:

<notextile>
<pre>    Services:
      DispatchSLURM:
        InternalURLs:
          "http://<code class="userinput">hostname.zzzzz.arvadosapi.com:9007</code>": {}</pre>
</notextile>

The following configuration parameters are optional.

{% include 'hpc_max_gateway_tunnels' %}

h3(#PollPeriod). Containers.PollInterval

crunch-dispatch-slurm polls the API server periodically for new containers to run.  The @PollInterval@ option controls how often this poll happens.  Set this to a string of numbers suffixed with one of the time units @ns@, @us@, @ms@, @s@, @m@, or @h@.  For example:

<notextile>
<pre>    Containers:
      <code class="userinput">PollInterval: <b>3m30s</b>
</code></pre>
</notextile>

h3(#ReserveExtraRAM). Containers.ReserveExtraRAM: Extra RAM for jobs

Extra RAM to reserve (in bytes) on each Slurm job submitted by Arvados, which is added to the amount specified in the container's @runtime_constraints@.  If not provided, the default value is zero.  Helpful when using @-cgroup-parent-subsystem@, where @crunch-run@ and @arv-mount@ share the control group memory limit with the user process.  In this situation, at least 256MiB is recommended to accommodate each container's @crunch-run@ and @arv-mount@ processes.

Supports suffixes @KB@, @KiB@, @MB@, @MiB@, @GB@, @GiB@, @TB@, @TiB@, @PB@, @PiB@, @EB@, @EiB@ (where @KB@ is 10[^3^], @KiB@ is 2[^10^], @MB@ is 10[^6^], @MiB@ is 2[^20^] and so forth).

<notextile>
<pre>    Containers:
      <code class="userinput">ReserveExtraRAM: <b>256MiB</b></code>
</pre>
</notextile>

h3(#MinRetryPeriod). Containers.MinRetryPeriod: Rate-limit repeated attempts to start containers

If Slurm is unable to run a container, the dispatcher will submit it again after the next PollPeriod. If PollPeriod is very short, this can be excessive. If MinRetryPeriod is set, the dispatcher will avoid submitting the same container to Slurm more than once in the given time span.

<notextile>
<pre>    Containers:
      <code class="userinput">MinRetryPeriod: <b>30s</b></code>
</pre>
</notextile>

h3(#KeepServiceURIs). Containers.Slurm.SbatchEnvironmentVariables

Some Arvados installations run a local keepstore on each compute node to handle all Keep traffic.  To override Keep service discovery and access the local keep server instead of the global servers, set ARVADOS_KEEP_SERVICES in SbatchEnvironmentVariables:

<notextile>
<pre>    Containers:
      SLURM:
        <span class="userinput">SbatchEnvironmentVariables:
          ARVADOS_KEEP_SERVICES: "http://127.0.0.1:25107"</span>
</code></pre>
</notextile>

h3(#PrioritySpread). Containers.Slurm.PrioritySpread

crunch-dispatch-slurm adjusts the "nice" values of its Slurm jobs to ensure containers are prioritized correctly relative to one another. This option tunes the adjustment mechanism.
* If non-Arvados jobs run on your Slurm cluster, and your Arvados containers are waiting too long in the Slurm queue because their "nice" values are too high for them to compete with other Slurm jobs, you should use a smaller PrioritySpread value.
* If you have an older Slurm system that limits nice values to 10000, a smaller @PrioritySpread@ can help avoid reaching that limit.
* In other cases, a larger value is beneficial because it reduces the total number of adjustments made by executing @scontrol@.

The smallest usable value is @1@. The default value of @10@ is used if this option is zero or negative. Example:

<notextile>
<pre>    Containers:
      SLURM:
        <code class="userinput">PrioritySpread: <b>1000</b></code></pre>
</notextile>

h3(#SbatchArguments). Containers.Slurm.SbatchArgumentsList

When crunch-dispatch-slurm invokes @sbatch@, you can add arguments to the command by specifying @SbatchArguments@.  You can use this to send the jobs to specific cluster partitions or add resource requests.  Set @SbatchArguments@ to an array of strings.  For example:

<notextile>
<pre>    Containers:
      SLURM:
        <code class="userinput">SbatchArgumentsList:
          - <b>"--partition=PartitionName"</b></code>
</pre>
</notextile>

Note: If an argument is supplied multiple times, @slurm@ uses the value of the last occurrence of the argument on the command line.  Arguments specified through Arvados are added after the arguments listed in SbatchArguments.  This means, for example, an Arvados container with that specifies @partitions@ in @scheduling_parameter@ will override an occurrence of @--partition@ in SbatchArguments.  As a result, for container parameters that can be specified through Arvados, SbatchArguments can be used to specify defaults but not enforce specific policy.

h3(#CrunchRunCommand-cgroups). Containers.CrunchRunArgumentList: Dispatch to Slurm cgroups

If your Slurm cluster uses the @task/cgroup@ TaskPlugin, you can configure Crunch's Docker containers to be dispatched inside Slurm's cgroups.  This provides consistent enforcement of resource constraints.  To do this, use a crunch-dispatch-slurm configuration like the following:

<notextile>
<pre>    Containers:
      <code class="userinput">CrunchRunArgumentsList:
        - <b>"-cgroup-parent-subsystem=memory"</b></code>
</pre>
</notextile>

When using cgroups v1, the choice of subsystem ("memory" in this example) must correspond to one of the resource types enabled in Slurm's @cgroup.conf@.  The specified subsystem is singled out only to let Crunch determine the name of the cgroup provided by Slurm.  Limits for other resource types will also be respected.

When doing this, you should also set "ReserveExtraRAM":#ReserveExtraRAM .

{% include 'notebox_begin' %}

Some versions of Docker (at least 1.9), when run under systemd, require the cgroup parent to be specified as a systemd slice.  This causes an error when specifying a cgroup parent created outside systemd, such as those created by Slurm.

You can work around this issue by disabling the Docker daemon's systemd integration.  This makes it more difficult to manage Docker services with systemd, but Crunch does not require that functionality, and it will be able to use Slurm's cgroups as container parents.  To do this, configure the Docker daemon on all compute nodes to run with the option @--exec-opt native.cgroupdriver=cgroupfs@.

{% include 'notebox_end' %}

h3(#CrunchRunCommand-network). Containers.CrunchRunArgumentList: Using host networking for containers

Older Linux kernels (prior to 3.18) have bugs in network namespace handling which can lead to compute node lockups.  This by is indicated by blocked kernel tasks in "Workqueue: netns cleanup_net".   If you are experiencing this problem, as a workaround you can disable use of network namespaces by Docker across the cluster.  Be aware this reduces container isolation, which may be a security risk.

<notextile>
<pre>    Containers:
      <code class="userinput">CrunchRunArgumentsList:
        - <b>"-container-enable-networking=always"</b>
        - <b>"-container-network-mode=host"</b></code>
</pre>
</notextile>

{% assign arvados_component = 'crunch-dispatch-slurm' %}

{% include 'install_packages' %}

{% include 'start_service' %}

{% include 'restart_api' %}
