---
layout: default
navsection: installguide
title: Build a cloud compute node image
...
{% comment %}
Copyright (C) The Arvados Authors. All rights reserved.

SPDX-License-Identifier: CC-BY-SA-3.0
{% endcomment %}

{% include 'notebox_begin_warning' %}
@arvados-dispatch-cloud@ is only relevant for cloud installations. Skip this section if you are installing an on premises cluster that will spool jobs to Slurm or LSF.
{% include 'notebox_end' %}

# "Introduction":#introduction
# "Create an SSH keypair":#sshkeypair
# "Compute image requirements":#requirements
# "The build script":#building
# "DNS resolution":#dns-resolution
# "NVIDIA GPU support":#nvidia
# "Singularity mksquashfs configuration":#singularity_mksquashfs_configuration
# "Build an AWS image":#aws
## "Autoscaling compute node scratch space":#aws-ebs-autoscaler
# "Build an Azure image":#azure

h2(#introduction). Introduction

This page describes how to build a compute node image that can be used to run containers dispatched by Arvados in the cloud.

Packer templates for AWS and Azure are provided with Arvados. To use them, the following are needed:

* "Packer":https://www.packer.io/
* credentials for your cloud account
* configuration details for your cloud account


h2(#sshkeypair). Create a SSH keypair

@arvados-dispatch-cloud@ communicates with the compute nodes via SSH. To do this securely, a SSH keypair is needed.

Generate a SSH keypair with no passphrase. The private key needs to be stored in the cluster configuration file (see @Containers/DispatchPrivateKey@) for use by @arvados-dispatch-cloud@, as described in the "next section":install-dispatch-cloud.html#update-config. The public key will be baked into the compute node images, see the cloud-specific documentation below.

<notextile>
<pre><code>~$ <span class="userinput">ssh-keygen -N '' -f ~/.ssh/id_dispatcher</span>
Generating public/private rsa key pair.
Your identification has been saved in /home/user/.ssh/id_dispatcher.
Your public key has been saved in /home/user/.ssh/id_dispatcher.pub.
The key fingerprint is:
[...]
~$ <span class="userinput">cat ~/.ssh/id_dispatcher</span>
-----BEGIN RSA PRIVATE KEY-----
MIIEpQIBAAKCAQEAqXoCzcOBkFQ7w4dvXf9B++1ctgZRqEbgRYL3SstuMV4oawks
ttUuxJycDdsPmeYcHsKo8vsEZpN6iYsX6ZZzhkO5nEayUTU8sBjmg1ZCTo4QqKXr
...
oFyAjVoexx0RBcH6BveTfQtJKbktP1qBO4mXo2dP0cacuZEtlAqW9Eb06Pvaw/D9
foktmqOY8MyctzFgXBpGTxPliGjqo8OkrOyQP2g+FL7v+Km31Xs61P8=
-----END RSA PRIVATE KEY-----
</code></pre>
</notextile>

h2(#requirements). Compute image requirements

Arvados comes with a build script to automate the creation of a suitable compute node image (see "The build script":#building below). It is provided as a convenience. It is also possible to create a compute node image via other means. These are the requirements:

* for AWS: the SSH public key for @arvados-dispatch-cloud@ (the one that corresponds with @Containers.DispatchPrivateKey@ in the Arvados config file) needs to go into ~/.ssh/authorized_keys for the SSH user you want @arvados-dispatch-cloud@ to use (cf. @CloudVMs.DriverParameters.AdminUsername@ in the Arvados config file) and that user needs to be able to sudo without password prompt, unless you use `root` in which case sudo is not used.
* for Azure: @arvados-dispatch-cloud@ automatically extracts the SSH public key from the value of @Containers.DispatchPrivateKey@ and uses an API call to create the user specified in @CloudVMs.DriverParameters.AdminUsername@ with that SSH public key and password-less sudo enabled.
* SSH needs to be running and reachable by @arvados-dispatch-cloud@ on port 22 (or a custom port, see @CloudVMS.SSHPort@ to in the Arvados config file)
* the @python3-arvados-fuse@ package needs to be installed
* @Docker@ or @Singularity@ needs to be installed (cf. @Containers.RuntimeEngine@ in the Arvados config file).
* all available scratch space should be made available under `/tmp`.

h2(#building). The build script

The necessary files are located in the @arvados/tools/compute-images@ directory in the source tree. A build script is provided to generate the image. The @--help@ argument lists all available options:

<notextile><pre><code>~$ <span class="userinput">./build.sh --help</span>
build.sh: Build cloud images for arvados-dispatch-cloud

Syntax:
        build.sh [options]

Options:

  --json-file &lt;path&gt;
      Path to the packer json file (required)
  --arvados-cluster-id &lt;xxxxx&gt;
      The ID of the Arvados cluster, e.g. zzzzz(required)
  --aws-profile &lt;profile&gt;
      AWS profile to use (valid profile from ~/.aws/config (optional)
  --aws-secrets-file &lt;path&gt;
      AWS secrets file which will be sourced from this script (optional)
      When building for AWS, either an AWS profile or an AWS secrets file
      must be provided.
  --aws-source-ami &lt;ami-xxxxxxxxxxxxxxxxx&gt;
      The AMI to use as base for building the images (required if building for AWS)
  --aws-region &lt;region&gt; (default: us-east-1)
      The AWS region to use for building the images
  --aws-vpc-id &lt;vpc-id&gt;
      VPC id for AWS, if not specified packer will derive from the subnet id or pick the default one.
  --aws-subnet-id &lt;subnet-xxxxxxxxxxxxxxxxx&gt;
      Subnet id for AWS, if not specified packer will pick the default one for the VPC.
  --aws-ebs-autoscale
      Install the AWS EBS autoscaler daemon (default: do not install the AWS EBS autoscaler).
  --aws-associate-public-ip &lt;true|false&gt;
      Associate a public IP address with the node used for building the compute image.
      Required when the machine running packer can not reach the node used for building
      the compute image via its private IP. (default: true if building for AWS)
      Note: if the subnet has "Auto-assign public IPv4 address" enabled, disabling this
      flag will have no effect.
  --aws-ena-support &lt;true|false&gt;
      Enable enhanced networking (default: true if building for AWS)
  --gcp-project-id &lt;project-id&gt;
      GCP project id (required if building for GCP)
  --gcp-account-file &lt;path&gt;
      GCP account file (required if building for GCP)
  --gcp-zone &lt;zone&gt; (default: us-central1-f)
      GCP zone
  --azure-secrets-file &lt;patch&gt;
      Azure secrets file which will be sourced from this script (required if building for Azure)
  --azure-resource-group &lt;resouce-group&gt;
      Azure resource group (required if building for Azure)
  --azure-location &lt;location&gt;
      Azure location, e.g. centralus, eastus, westeurope (required if building for Azure)
  --azure-sku &lt;sku&gt; (required if building for Azure, e.g. 16.04-LTS)
      Azure SKU image to use
  --ssh_user &lt;user&gt; (default: packer)
      The user packer will use to log into the image
  --resolver &lt;resolver_IP&gt;
      The dns resolver for the machine (default: host's network provided)
  --reposuffix &lt;suffix&gt;
      Set this to "-dev" to track the unstable/dev Arvados repositories
  --public-key-file &lt;path&gt;
      Path to the public key file that a-d-c will use to log into the compute node (required)
  --mksquashfs-mem (default: 256M)
      Only relevant when using Singularity. This is the amount of memory mksquashfs is allowed to use.
  --nvidia-gpu-support
      Install all the necessary tooling for Nvidia GPU support (default: do not install Nvidia GPU support)
  --debug
      Output debug information (default: no debug output is printed)
</code></pre></notextile>

h2(#dns-resolution). DNS resolution

Compute nodes must be able to resolve the hostnames of the API server and any keepstore servers to your internal IP addresses. You can do this by running an internal DNS resolver. The IP address of the resolver should be passed as the value for the @--resolver@ argument to "the build script":#building.

Alternatively, the services could be hardcoded into an @/etc/hosts@ file. For example:

<notextile><pre><code>10.20.30.40     <span class="userinput">ClusterID.example.com</span>
10.20.30.41     <span class="userinput">keep1.ClusterID.example.com</span>
10.20.30.42     <span class="userinput">keep2.ClusterID.example.com</span>
</code></pre></notextile>

Adding these lines to the @/etc/hosts@ file in the compute node image could be done with a small change to the Packer template and the @scripts/base.sh@ script, which will be left as an exercise for the reader.

h2(#nvidia). NVIDIA GPU support

If you plan on using instance types with NVIDIA GPUs, add @--nvidia-gpu-support@ to the build command line.  Arvados uses the same compute image for both GPU and non-GPU instance types.  The GPU tooling is ignored when using the image with a non-GPU instance type.

{% assign show_docker_warning = true %}

{% include 'singularity_mksquashfs_configuration' %}

The desired amount of memory to make available for @mksquashfs@ can be configured in an argument to "the build script":#building. It defaults to @256M@.

h2(#aws). Build an AWS image

<notextile><pre><code>~$ <span class="userinput">./build.sh --json-file arvados-images-aws.json \
           --arvados-cluster-id ClusterID \
           --aws-profile AWSProfile \
           --aws-source-ami AMI \
           --aws-vpc-id VPC \
           --aws-subnet-id Subnet \
           --ssh_user admin \
           --resolver ResolverIP \
           --public-key-file ArvadosDispatchCloudPublicKeyPath
</span>
</code></pre></notextile>

For @ClusterID@, fill in your cluster ID. The @VPC@ and @Subnet@ should be configured for where you want the compute image to be generated and stored. The @AMI@ is the identifier for the base image to be used. Current AMIs are maintained by "Debian":https://wiki.debian.org/Cloud/AmazonEC2Image/Buster and "Ubuntu":https://cloud-images.ubuntu.com/locator/ec2/.

@AWSProfile@ should be replaced with the name of an AWS profile with sufficient permissions to create the image.

@ArvadosDispatchCloudPublicKeyPath@ should be replaced with the path to the ssh *public* key file generated in "Create an SSH keypair":#sshkeypair, above.

h3(#aws-ebs-autoscaler). Autoscaling compute node scratch space

If you want to add the "AWS EBS autoscaler":https://github.com/awslabs/amazon-ebs-autoscale daemon in your images, add the @--aws-ebs-autoscale@ flag to the "the build script":#building. Doing so will make the compute image scratch space scale automatically as needed.

The AWS EBS autoscaler daemon will be installed with this configuration:

<notextile><pre><code>{
    "mountpoint": "/tmp",
    "filesystem": "lvm.ext4",
    "lvm": {
      "volume_group": "autoscale_vg",
      "logical_volume": "autoscale_lv"
    },
    "volume": {
        "type": "gp3",
        "iops": 3000,
        "encrypted": 1
    },
    "detection_interval": 2,
    "limits": {
        "max_ebs_volume_size": 1500,
        "max_logical_volume_size": 8000,
        "max_ebs_volume_count": 16
    },
    "logging": {
        "log_file": "/var/log/ebs-autoscale.log",
        "log_interval": 300
    }
}
</code></pre></notextile>

Changing the configuration is left as an exercise for the reader.

Using this feature also requires a few Arvados configuration changes in @config.yml@:

* The @Containers/InstanceTypes@ list should be modified so that all @AddedScratch@ lines are removed, and the @IncludedScratch@ value should be set to a (fictional) high number. This way, the scratch space requirements will be met by all the defined instance type. For example:

<notextile><pre><code>    InstanceTypes:
      c5large:
        ProviderType: c5.large
        VCPUs: 2
        RAM: 4GiB
        IncludedScratch: 16TB
        Price: 0.085
      m5large:
        ProviderType: m5.large
        VCPUs: 2
        RAM: 8GiB
        IncludedScratch: 16TB
        Price: 0.096
...
</code></pre></notextile>

* You will also need to create an IAM role in AWS with these permissions:

<notextile><pre><code>{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "ec2:AttachVolume",
                "ec2:DescribeVolumeStatus",
                "ec2:DescribeVolumes",
                "ec2:DescribeTags",
                "ec2:ModifyInstanceAttribute",
                "ec2:DescribeVolumeAttribute",
                "ec2:CreateVolume",
                "ec2:DeleteVolume",
                "ec2:CreateTags"
            ],
            "Resource": "*"
        }
    ]
}
</code></pre></notextile>

Then, in @config.yml@ set @Containers/CloudVMs/DriverParameters/IAMInstanceProfile@ to the name of the IAM role. This will make @arvados-dispatch-cloud@ pass an IAMInstanceProfile to the compute nodes as they start up, giving them sufficient permissions to attach and grow EBS volumes.

h2(#azure). Build an Azure image

<notextile><pre><code>~$ <span class="userinput">./build.sh --json-file arvados-images-azure.json \
           --arvados-cluster-id ClusterID \
           --azure-resource-group ResourceGroup \
           --azure-location AzureRegion \
           --azure-sku AzureSKU \
           --azure-secrets-file AzureSecretsFilePath \
           --resolver ResolverIP \
           --public-key-file ArvadosDispatchCloudPublicKeyPath
</span>
</code></pre></notextile>

For @ClusterID@, fill in your cluster ID. The @ResourceGroup@ and @AzureRegion@ (e.g. 'eastus2') should be configured for where you want the compute image to be generated and stored. The @AzureSKU@ is the SKU of the base image to be used, e.g. '18.04-LTS' for Ubuntu 18.04.

@AzureSecretsFilePath@ should be replaced with the path to a shell script that loads the Azure secrets with sufficient permissions to create the image. The file would look like this:

<notextile><pre><code>export ARM_CLIENT_ID=...
export ARM_CLIENT_SECRET=...
export ARM_SUBSCRIPTION_ID=...
export ARM_TENANT_ID=...
</code></pre></notextile>

These secrets can be generated from the Azure portal, or with the cli using a command like this:

<notextile><pre><code>~$ <span class="userinput">az ad sp create-for-rbac --name Packer --password ...</span>
</code></pre></notextile>

@ArvadosDispatchCloudPublicKeyPath@ should be replaced with the path to the ssh *public* key file generated in "Create an SSH keypair":#sshkeypair, above.
