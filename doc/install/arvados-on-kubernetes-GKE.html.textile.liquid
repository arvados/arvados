---
layout: default
navsection: installguide
title: Arvados on GKE
...
{% comment %}
Copyright (C) The Arvados Authors. All rights reserved.

SPDX-License-Identifier: CC-BY-SA-3.0
{% endcomment %}

This page documents setting up and running the "Arvados on Kubernetes":{{ site.baseurl }}/install/arvados-on-kubernetes.html @Helm@ chart on @Google Kubernetes Engine@ (GKE).

h2. Prerequisites

h3. Install tooling

Install @gcloud@:

* Follow the instructions at "https://cloud.google.com/sdk/downloads":https://cloud.google.com/sdk/downloads

Install @kubectl@:

<pre>
$ gcloud components install kubectl
</pre>

Install @helm@:

* Follow the instructions at "https://docs.helm.sh/using_helm/#installing-helm":https://docs.helm.sh/using_helm/#installing-helm

h3. Create the GKE cluster

This can be done via the "cloud console":https://console.cloud.google.com/kubernetes/ or via the command line:

<pre>
$ gcloud container clusters create <CLUSTERNAME> --zone us-central1-a --machine-type n1-standard-2
</pre>

It takes a few minutes for the cluster to be initialized.

h3. Reserve a static IP

Reserve a "static IP":https://console.cloud.google.com/networking/addresses in GCE. Make sure the IP is in the same region as your GKE cluster, and is of the "Regional" type.

h3. Connect to the GKE cluster.

Via the web:
* Click the "Connect" button next to your "GKE cluster"https://console.cloud.google.com/kubernetes/.
* Execute the "Command-line access" command on your development machine.

Alternatively, use this command:

<pre>
$ gcloud container clusters get-credentials <CLUSTERNAME> --zone us-central1-a --project <YOUR-PROJECT>
</pre>

Test the connection:

<pre>
$ kubectl get nodes
</pre>

Test @helm@ by running

<pre>
$ helm ls
</pre>

There should be no errors. The command will return nothing.

h2(#git). Clone the repository

Clone the repository and nagivate to the @arvados-k8s/charts/arvados@ directory:

<pre>
$ git clone https://github.com/arvados/arvados-k8s.git
$ cd arvados-k8s/charts/arvados
</pre>

h2(#Start). Start the Arvados cluster

Next, determine the IP address that the Arvados cluster will use to expose its API, Workbench, etc. If you want this Arvados cluster to be reachable from places other than the local machine, the IP address will need to be routable as appropriate.

<pre>
$ ./cert-gen.sh <IP ADDRESS>
</pre>

The @values.yaml@ file contains a number of variables that can be modified. At a minimum, review and/or modify the values for

<pre>
  adminUserEmail
  adminUserPassword
  superUserSecret
  anonymousUserSecret
</pre>

Now start the Arvados cluster:

<pre>
$ helm install arvados . --set externalIP=<IP ADDRESS>
</pre>

At this point, you can use kubectl to see the Arvados cluster boot:

<pre>
$ kubectl get pods
$ kubectl get svc
</pre>

After a few minutes, there shouldn't be any services listed with a 'Pending' external IP address. At that point you can access Arvados Workbench at the IP address specified

* https://&lt;IP ADDRESS&gt;

with the username and password specified in the @values.yaml@ file.

Alternatively, use the Arvados cli tools or SDKs. First set the environment variables:

<pre>
$ export ARVADOS_API_TOKEN=<superUserSecret from values.yaml>
$ export ARVADOS_API_HOST=<STATIC IP>:444
$ export ARVADOS_API_HOST_INSECURE=true
</pre>

Test access with:

<pre>
$ arv user current
</pre>

h2(#reload). Reload

If you make changes to the Helm chart (e.g. to @values.yaml@), you can reload Arvados with

<pre>
$ helm upgrade arvados .
</pre>

h2. Shut down

<pre>
$ helm del arvados
</pre>

<pre>
$ gcloud container clusters delete <CLUSTERNAME> --zone us-central1-a
</pre>
